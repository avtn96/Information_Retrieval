# -*- coding: utf-8 -*-
"""tf-idf.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZkN9fURgluUkFFDJ950XQWxoCTi1KwFw
"""

import requests
from bs4 import BeautifulSoup
from nltk.tokenize import word_tokenize
from nltk.stem import PorterStemmer
from nltk.corpus import stopwords
from collections import Counter

# Ensure nltk resources are downloaded
import nltk
nltk.download('punkt')
nltk.download('stopwords')

stop_words = set(stopwords.words('english'))
stemmer = PorterStemmer()

def fetch_and_process_text(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        text = soup.get_text()
        tokens = word_tokenize(text)
        processed_tokens = [stemmer.stem(word.lower()) for word in tokens if word.isalnum() and word.lower() not in stop_words]
        return processed_tokens
    except Exception as e:
        print(f"Error processing URL {url}: {e}")
        return []

def process_multiple_urls(urls, words):
    results = {}
    document_presence = {stemmer.stem(word.lower()): 0 for word in words}
    total_documents = len(urls)

    for url in urls:
        tokens = fetch_and_process_text(url)
        token_counter = Counter(tokens)
        results[url] = token_counter
        # Update document presence for each word
        for word in words:
            stemmed_word = stemmer.stem(word.lower())
            if token_counter[stemmed_word] > 0:
                document_presence[stemmed_word] += 1

    tf_idf_results = {url: {} for url in urls}
    for url, token_counter in results.items():
        total_words = sum(token_counter.values())
        for word in words:
            stemmed_word = stemmer.stem(word.lower())
            tf = token_counter[stemmed_word] / total_words if total_words > 0 else 0
            y = total_documents / document_presence[stemmed_word] if document_presence[stemmed_word] > 0 else 0
            tf_idf_results[url][stemmed_word] = tf * y

    return tf_idf_results

urls = [
    "https://www.rottentomatoes.com/m/asteroid_city",
    "https://www.rottentomatoes.com/m/napoleon_2023",
    "https://www.rottentomatoes.com/m/saw_x",
    "https://www.rottentomatoes.com/m/pain_hustlers",
    "https://www.rottentomatoes.com/m/sisu_2022",
    "https://www.rottentomatoes.com/m/guardians_of_the_galaxy_vol_3",
    "https://www.rottentomatoes.com/m/the_hunger_games_the_ballad_of_songbirds_and_snakes",
    "https://www.rottentomatoes.com/m/they_cloned_tyrone",
    "https://www.rottentomatoes.com/m/the_marvels",
    "https://www.rottentomatoes.com/m/fair_play_2023",
    "https://www.rottentomatoes.com/m/perfect_days_2023",
    "https://www.rottentomatoes.com/m/wish_2023",
    "https://www.rottentomatoes.com/m/all_of_us_strangers",
    "https://www.rottentomatoes.com/m/blue_beetle",
    "https://www.rottentomatoes.com/m/m3gan",
    "https://www.rottentomatoes.com/m/aquaman_and_the_lost_kingdom",
    "https://www.rottentomatoes.com/m/the_zone_of_interest",
    "https://www.rottentomatoes.com/m/guy_ritchies_the_covenant",
    "https://www.rottentomatoes.com/m/anyone_but_you_2023",
    "https://www.rottentomatoes.com/m/anatomy_of_a_fall",
    "https://www.rottentomatoes.com/m/eileen",
    "https://www.rottentomatoes.com/m/reptile_2023",
    "https://www.rottentomatoes.com/m/rebel_moon_part_1_a_child_of_fire",
    "https://www.rottentomatoes.com/m/heart_of_stone_2023",
    "https://www.rottentomatoes.com/m/mission_impossible_dead_reckoning_part_one",
    "https://www.rottentomatoes.com/m/indiana_jones_and_the_dial_of_destiny",
    "https://www.rottentomatoes.com/m/talk_to_me_2023",
    "https://www.rottentomatoes.com/m/dungeons_and_dragons_honor_among_thieves",
    "https://www.rottentomatoes.com/m/the_equalizer_3",
    "https://www.rottentomatoes.com/m/thanksgiving_2023",
    "https://www.rottentomatoes.com/m/gran_turismo_based_on_a_true_story",
    "https://www.rottentomatoes.com/m/barbie",
    "https://www.rottentomatoes.com/m/wonka",
    "https://www.rottentomatoes.com/m/leave_the_world_behind_2023",
    "https://www.rottentomatoes.com/m/past_lives",
    "https://www.rottentomatoes.com/m/sound_of_freedom",
    "https://www.rottentomatoes.com/m/a_man_called_otto",
    "https://www.rottentomatoes.com/m/knock_at_the_cabin",
    "https://www.rottentomatoes.com/m/infested_2023",
    "https://www.rottentomatoes.com/m/killers_of_the_flower_moon",
    "https://www.rottentomatoes.com/m/the_iron_claw_2023",
    "https://www.rottentomatoes.com/m/dream_scenario",
    "https://www.rottentomatoes.com/m/tell_them_you_love_me",
    "https://www.rottentomatoes.com/m/joy_ride_2023",
    "https://www.rottentomatoes.com/m/fast_x",
    "https://www.rottentomatoes.com/m/old_dads",
    "https://www.rottentomatoes.com/m/the_killer_2023",
    "https://www.rottentomatoes.com/m/the_boy_and_the_heron",
    "https://www.rottentomatoes.com/m/transformers_rise_of_the_beasts",
    "https://www.rottentomatoes.com/m/the_family_plan",
    "https://www.rottentomatoes.com/m/when_evil_lurks",
    "https://www.rottentomatoes.com/m/the_boys_in_the_boat",
    "https://www.rottentomatoes.com/m/the_super_mario_bros_movie",
    "https://www.rottentomatoes.com/m/youll_never_find_me",
    "https://www.rottentomatoes.com/m/no_hard_feelings_2023",
    "https://www.rottentomatoes.com/m/oppenheimer_2023",
    "https://www.rottentomatoes.com/m/suitable_flesh",
    "https://www.rottentomatoes.com/m/the_creator_2023",
    "https://www.rottentomatoes.com/m/the_flash_2023",
    "https://www.rottentomatoes.com/m/five_nights_at_freddys",
    "https://www.rottentomatoes.com/m/finestkind",
    "https://www.rottentomatoes.com/m/ghosted_2023",
    "https://www.rottentomatoes.com/m/godzilla_minus_one",
    "https://www.rottentomatoes.com/m/spider_man_across_the_spider_verse",
    "https://www.rottentomatoes.com/m/poor_things",
    "https://www.rottentomatoes.com/m/nefarious_2023",
    "https://www.rottentomatoes.com/m/the_holdovers",
    "https://www.rottentomatoes.com/m/evil_dead_rise",
    "https://www.rottentomatoes.com/m/operation_fortune_ruse_de_guerre",
    "https://www.rottentomatoes.com/m/may_december",
    "https://www.rottentomatoes.com/m/john_wick_chapter_4",
    "https://www.rottentomatoes.com/m/memory_2023",
    "https://www.rottentomatoes.com/m/saltburn",
    "https://www.rottentomatoes.com/m/ferrari_2023",
    "https://www.rottentomatoes.com/m/ant_man_and_the_wasp_quantumania",
    "https://www.rottentomatoes.com/m/no_one_will_save_you"
]

words = ['movie', 'duration', '2023', '1.5', 'h']
tf_idf_results = process_multiple_urls(urls, words)

for url, results in tf_idf_results.items():
    print(f"\nTF-IDF Results for URL: {url}")
    for word, value in results.items():
        print(f"{word}: {value}")